trigger:
- main

stages:
- stage: Pull_Request
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
    - job: CI
      pool:
        name: 'AnonifyAgent'
      steps:
        - task: Docker@2
          displayName: 'Login to ACR'
          inputs:
            command: login
            containerRegistry: anonify-ci-cd-acr
        - template: templates/setup_env.yml
        - script: |
            # TODO: Workaround for duplicate aesm service
            # Remove here once https://github.com/occlum/occlum/pull/443 merged.
            docker-compose up -d
            docker-compose exec -T sgx_machine bash -c "sudo chown -R anonify-dev:anonify-dev anonify ; cd anonify && ./scripts/test.sh"
          env:
            SPID: $(SPID)
            SUB_KEY: $(SUB_KEY)
          displayName: 'Run rust-sgx-sdk tests'
        - script: docker-compose down --rmi all --volumes --remove-orphans
          condition: always()
          displayName: 'rust-sgx-sdk docker-compose down'

    - job: PGX_CI
      pool:
        name: 'AnonifyAgent'
      steps:
        - task: Docker@2
          displayName: 'Login to ACR'
          inputs:
            command: login
            containerRegistry: anonify-ci-cd-acr
        - template: templates/setup_env.yml
        - script: |
            docker-compose -f pgx-docker-compose.yml up -d
            docker-compose -f pgx-docker-compose.yml exec -T sgx_machine_pgx bash -c "cd anonify && ./scripts/encrypted-sql-ops-pg-test.sh"
          env:
            SPID: $(SPID)
            SUB_KEY: $(SUB_KEY)
          displayName: 'Run encrypted-sql-ops-pg integration tests'
        - script: docker-compose -f pgx-docker-compose.yml down --rmi all --volumes --remove-orphans
          condition: always()
          displayName: 'pgx docker-compose down'

    - job: E2E_CI
      pool:
        name: 'AnonifyAgent'
      steps:
        - task: Docker@2
          displayName: Build erc20 image
          inputs:
            command: build
            containerRegistry: anonify-ci-cd-acr
            repository: erc20-state-runtime
            tags: latest
            dockerfile: ./docker/example-erc20.Dockerfile
            buildContext: .
            arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
        - task: Docker@2
          displayName: Build key-vault for erc20 image
          inputs:
            command: build
            containerRegistry: anonify-ci-cd-acr
            repository: key-vault-for-erc20
            tags: latest
            dockerfile: ./docker/example-keyvault.Dockerfile
            buildContext: .
            arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
        - template: templates/setup_env.yml
        - script: ./scripts/e2e-test.sh
          env:
            SPID: $(SPID)
            SUB_KEY: $(SUB_KEY)
          displayName: 'Run E2E tests'
        - script: docker image prune -f
          condition: always()
          displayName: 'Remove dangling images'
        - script: docker-compose -f e2e-docker-compose.yml down --rmi all --volumes --remove-orphans
          condition: always()
          displayName: 'Shutdown'

    # NOTE: temporary removed: Add once occlum version bump up to 0.23.0
    # - job: OCCLUM_CI
        # - template: templates/setup_env.yml
        # - script: |
        #     docker-compose -f occlum-docker-compose.yml up -d
        #     # TODO: Remove the dettached mode flag once the enclave runs as the embedded mode.
        #     docker-compose -f occlum-docker-compose.yml exec -d -T enclave bash -c "./anonify/scripts/occlum-enclave-test.sh"
        #     docker-compose -f occlum-docker-compose.yml exec -T host bash -c "./anonify/scripts/occlum-host-test.sh"
        #   displayName: 'Run occlum tests'
        # env:
        #   SPID: $(SPID)
        #   SUB_KEY: $(SUB_KEY)
        # - script: |
        #     sudo systemctl restart aesmd
        #     LD_LIBRARY_PATH=/opt/intel/sgx-aesm-service/aesm /opt/intel/sgx-aesm-service/aesm/aesm_service

        #     docker-compose -f occlum-docker-compose.yml down --rmi all --volumes --remove-orphans
        #   condition: always()
        #   displayName: 'occlum docker-compose down'


- stage: Merge_to_main_for_base
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - job: CheckChangesOfBaseDockerfile
    displayName: 'Check changes of base Dockerfile'
    steps:
    - template: templates/check_changes_of_base_dockerfile.yml

  - job: Build_and_Push_rust_sgx_sdk_rootless_image
    pool:
      name: 'AnonifyAgent'
    dependsOn: CheckChangesOfBaseDockerfile
    condition: eq(dependencies.CheckChangesOfBaseDockerfile.outputs['check_changes_of_base_dockerfile.SOURCE_CODE_CHANGED'], 'true')
    steps:
    - task: Docker@2
      displayName: 'Build rust-sgx-sdk-rootless image'
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: rust-sgx-sdk-rootless
        tags: latest
        dockerfile: ./docker/base-rust-sgx-sdk-rootless.Dockerfile
        buildContext: .
    - task: Docker@2
      displayName: 'Push rust-sgx-sdk-rootless image'
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: rust-sgx-sdk-rootless
        tags: latest
        dockerfile: ./docker/base-rust-sgx-sdk-rootless.Dockerfile
        buildContext: .
    - script: docker image prune -f
      condition: always()
      displayName: 'Remove dangling images for rootless'
    - script: docker rmi anonify.azurecr.io/rust-sgx-sdk-rootless:latest
      condition: always()
      displayName: 'Remove built images for rootless'

  - job: Build_and_Push_anonify_dev_image
    pool:
      name: 'AnonifyAgent'
    dependsOn: CheckChangesOfBaseDockerfile
    condition: eq(dependencies.CheckChangesOfBaseDockerfile.outputs['check_changes_of_base_dockerfile.SOURCE_CODE_CHANGED'], 'true')
    steps:
    - task: Docker@2
      displayName: 'Build anonify-dev image'
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: anonify-dev
        tags: latest
        dockerfile: ./docker/base-anonify-dev.Dockerfile
        buildContext: .
    - task: Docker@2
      displayName: 'Push anonify-dev image'
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: anonify-dev
        tags: latest
        dockerfile: ./docker/base-anonify-dev.Dockerfile
        buildContext: .
    - script: docker image prune -f
      condition: always()
      displayName: 'Remove dangling images for base'
    - script: docker rmi anonify.azurecr.io/anonify-dev:latest
      condition: always()
      displayName: 'Remove built images for base'

  - job: Build_and_Push_anonify_dev_pgx_image
    pool:
      name: 'AnonifyAgent'
    dependsOn: CheckChangesOfBaseDockerfile
    condition: eq(dependencies.CheckChangesOfBaseDockerfile.outputs['check_changes_of_base_dockerfile.SOURCE_CODE_CHANGED'], 'true')
    steps:
    - task: Docker@2
      displayName: 'Build anonify-dev-pgx image'
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: anonify-dev-pgx
        tags: latest
        dockerfile: ./docker/base-anonify-dev-pgx.Dockerfile
        buildContext: .
    - task: Docker@2
      displayName: 'Push anonify-dev-pgx image'
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: anonify-dev-pgx
        tags: latest
        dockerfile: ./docker/base-anonify-dev-pgx.Dockerfile
        buildContext: .
    - script: docker image prune -f
      condition: always()
      displayName: 'Remove dangling images for pgx'
    - script: docker rmi anonify.azurecr.io/anonify-dev-pgx:latest
      condition: always()
      displayName: 'Remove built images for pgx'

- stage: Merge_to_main_base_for_example
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - job: CI
    pool:
      name: 'AnonifyAgent'
    steps:
    - template: templates/setup_env.yml
    - script: |
        # TODO: Workaround for duplicate aesm service
        # Remove here once https://github.com/occlum/occlum/pull/443 merged.
        docker-compose up -d
        docker-compose exec -T sgx_machine bash -c "sudo chown -R anonify-dev:anonify-dev anonify ; cd anonify && ./scripts/test.sh"
      env:
        SPID: $(SPID)
        SUB_KEY: $(SUB_KEY)
      displayName: 'Run rust-sgx-sdk tests'
    - script: docker-compose down --rmi all --volumes --remove-orphans
      condition: always()
      displayName: 'rust-sgx-sdk docker-compose down'

  - job: Build_and_Push_erc20_image
    pool:
      name: 'AnonifyAgent'
    steps:
    - task: Docker@2
      displayName: 'Build erc20 image'
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: erc20-state-runtime
        tags: latest
        dockerfile: ./docker/example-erc20.Dockerfile
        buildContext: .
        arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
    - task: Docker@2
      displayName: 'Push erc20 image'
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: erc20-state-runtime
        tags: latest
        dockerfile: ./docker/example-erc20.Dockerfile
        buildContext: .
    - script: docker image prune -f
      condition: always()
      displayName: 'Remove dangling images for state-runtime-erc20'
    - script: docker rmi anonify.azurecr.io/erc20-state-runtime:latest
      condition: always()
      displayName: 'Remove built images for state-runtime-rc20'

  - job: Build_and_Push_key_vault_for_erc20_image
    pool:
      name: 'AnonifyAgent'
    steps:
    - task: Docker@2
      displayName: 'Build key-vault for erc20 image'
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: key-vault-for-erc20
        tags: latest
        dockerfile: ./docker/example-keyvault.Dockerfile
        buildContext: .
        arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
    - task: Docker@2
      displayName: 'Push key-vault for erc20 image'
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: key-vault-for-erc20
        tags: latest
        dockerfile: ./docker/example-keyvault.Dockerfile
        buildContext: .
    - script: docker image prune -f
      condition: always()
      displayName: 'Remove dangling images for key-vault-erc20'
    - script: docker rmi anonify.azurecr.io/key-vault-for-erc20:latest
      condition: always()
      displayName: 'Remove built images for key-vault-erc20'

  - job: E2E_CI
    pool:
      name: 'AnonifyAgent'
    dependsOn: ['Build_and_Push_erc20_image', 'Build_and_Push_key_vault_for_erc20_image']
    steps:
      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: anonify-ci-cd-acr
      - template: templates/setup_env.yml
      - script: ./scripts/e2e-test.sh
        env:
          SPID: $(SPID)
          SUB_KEY: $(SUB_KEY)
        displayName: 'Run E2E tests'
      - script: docker-compose -f e2e-docker-compose.yml down --rmi all --volumes --remove-orphans
        condition: always()
        displayName: 'Shutdown'

  - job: PGX_CI
    pool:
      name: 'AnonifyAgent'
    steps:
      - task: Docker@2
        displayName: 'Login to ACR'
        inputs:
          command: login
          containerRegistry: anonify-ci-cd-acr
      - template: templates/setup_env.yml
      - script: |
          docker-compose -f pgx-docker-compose.yml up -d
          docker-compose -f pgx-docker-compose.yml exec -T sgx_machine_pgx bash -c "cd anonify && ./scripts/encrypted-sql-ops-pg-test.sh"
        env:
          SPID: $(SPID)
          SUB_KEY: $(SUB_KEY)
        displayName: 'Run encrypted-sql-ops-pg integration tests'
      - script: docker-compose -f pgx-docker-compose.yml down --rmi all --volumes --remove-orphans
        condition: always()
        displayName: 'pgx docker-compose down'

  - job: Build_and_Push_encrypted_sql_ops_pg_image
    pool:
      name: 'AnonifyAgent'
    steps:
    - task: Docker@2
      displayName: 'Build encrypted-sql-ops-pg image'
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: encrypted-sql-ops-pg
        tags: latest
        dockerfile: ./docker/example-encrypted-sql-ops-pg.Dockerfile
        buildContext: .
        arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
    - task: Docker@2
      displayName: 'Push encrypted-sql-ops-pg image'
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: encrypted-sql-ops-pg
        tags: latest
        dockerfile: ./docker/example-encrypted-sql-ops-pg.Dockerfile
        buildContext: .
    - script: docker image prune -f
      condition: always()
      displayName: 'Remove dangling images for sql'
    - script: docker rmi anonify.azurecr.io/encrypted-sql-ops-pg:latest
      condition: always()
      displayName: 'Remove built images for sql'
